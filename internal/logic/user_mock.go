// Code generated by MockGen. DO NOT EDIT.
// Source: internal/logic/user.go

// Package logic is a generated GoMock package.
package logic

import (
	context "context"
	meta "microservices/internal/pkg/meta"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserLogicInterface is a mock of UserLogicInterface interface.
type MockUserLogicInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserLogicInterfaceMockRecorder
}

// MockUserLogicInterfaceMockRecorder is the mock recorder for MockUserLogicInterface.
type MockUserLogicInterfaceMockRecorder struct {
	mock *MockUserLogicInterface
}

// NewMockUserLogicInterface creates a new mock instance.
func NewMockUserLogicInterface(ctrl *gomock.Controller) *MockUserLogicInterface {
	mock := &MockUserLogicInterface{ctrl: ctrl}
	mock.recorder = &MockUserLogicInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLogicInterface) EXPECT() *MockUserLogicInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserLogicInterface) Create(ctx context.Context, user *meta.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserLogicInterfaceMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserLogicInterface)(nil).Create), ctx, user)
}

// Edit mocks base method.
func (m *MockUserLogicInterface) Edit(ctx context.Context, id uint64, name, email, phone *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, id, name, email, phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockUserLogicInterfaceMockRecorder) Edit(ctx, id, name, email, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockUserLogicInterface)(nil).Edit), ctx, id, name, email, phone)
}

// GetByUid mocks base method.
func (m *MockUserLogicInterface) GetByUid(ctx context.Context, uid uint64) (*meta.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUid", ctx, uid)
	ret0, _ := ret[0].(*meta.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUid indicates an expected call of GetByUid.
func (mr *MockUserLogicInterfaceMockRecorder) GetByUid(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUid", reflect.TypeOf((*MockUserLogicInterface)(nil).GetByUid), ctx, uid)
}

// List mocks base method.
func (m *MockUserLogicInterface) List(ctx context.Context) ([]meta.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]meta.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserLogicInterfaceMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserLogicInterface)(nil).List), ctx)
}
